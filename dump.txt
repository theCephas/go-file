LESSON 1

// strings
	// var nameOne string = "mario"
	// var nameTwo = "Iseoluwa"
	// var nameThree string

	// fmt.Println(nameOne, nameTwo, nameThree)

	// nameOne = "peach"
	// nameThree = "Peter"

	// fmt.Println(nameOne, nameTwo, nameThree)

	// nameFour := "Victor"

	// fmt.Println(nameOne, nameTwo, nameThree, nameFour)

	// ints
	// var ageOne int = 3
	// var ageTwo = 20

	// ageThree := ageOne + ageTwo

	// fmt.Println(ageOne, ageTwo, ageThree)

	// bits and memory
	// var numOne int8 = 40
	// var numTwo int8 = -128
	// numThree uint8 := -100
	// fmt.Println(numOne, numTwo)

LESSON 2

Difference between Println and Print. Println does not need a line breaker to have a full sentence in a single line
but Print needs a line breaker to have a full sentence in a single line (\n).

// Printf (formatted strings)
	fmt.Printf("My name is %v, I am %v years old \n", name, age)
	fmt.Printf("you scored %0.2f points \n", 43.546)

	// Sprintf (save formatted strings)
	var str = fmt.Sprintf("My name is %v, I am %v years old \n", name, age)
	fmt.Println(str)

LESSON 3

Here, I am learning how to pass arrays and also use slices in golang. This made me understand the true concept of being a statically typed language.
So technically, rather than the conventional way of using square brackets to write arrays in either javascript or python, we use curly brackets to write arrays.

this is an example: var ages [3]int = [3]int{1, 2, 3}

Also, to check the length of an array, we use len(), to check the length of an array. Where, the variable would be inside the bracket of len.

SLICE
I am beginning to learn how slices are used where they are used to add or remove items from an array. Slices often use arrays under the hood.
Using the "append" function adds an item to the end of an array.